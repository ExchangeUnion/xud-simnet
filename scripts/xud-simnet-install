#!/bin/bash

check_prereq() {

# verify existing of ~/xud-simnet
temp=`ls ~/xud-simnet`
if [ $? -ne 0 ]; then
	echo "~/xud-simnet is missing"
	exit 1
fi
# verify git
temp=`which git`
if [ $? -ne 0 ]; then
	echo "git is missing"
	exit 1
fi
# verify make
temp=`which make`
if [ $? -ne 0 ]; then
	echo "make is missing"
	exit 1
fi
# verify npm
temp=`which npm`
if [ $? -ne 0 ]; then
	echo "npm is missing"
	exit 1
fi
# verify python
temp=`which python`
if [ $? -ne 0 ]; then
	echo "python is missing"
	exit 1
fi
if ! command -v python3.7
 then
   echo "python3.7 is missing"
   exit 1
fi
# verify killall
temp=`which killall`
if [ $? -ne 0 ]; then
	echo "killall is missing"
	exit 1
fi
# verify rsync
temp=`which rsync`
if [ $? -ne 0 ]; then
	echo "rsync is missing"
	exit 1
fi
# verify patch
temp=`which patch`
if [ $? -ne 0 ]; then
	echo "patch is missing"
	exit 1
fi
# verify go
temp=`which go`
if [ $? -ne 0 ]; then
	echo "go is missing"
	exit 1
fi
# verify PATH
temp=`echo $PATH|grep xud-simnet/scripts`
if [ $? -ne 0 ]; then
	echo "PATH is not properly set. Did you source setup.bash?"
	exit 1
fi
# verify PATH
temp=`echo $PATH|grep xud-simnet/go/bin`
if [ $? -ne 0 ]; then
	echo "PATH is not properly set. Did you source setup.bash?"
	exit 1
fi
echo "found all pre-requisites"
}


make_dir () {
if ! mkdir "$1"; then
	echo "$1 already exists. Please run xud-simnet-clean to clean all leftovers before installing."
	exit 1
fi
}

if ! cd ~/xud-simnet; then
  	  echo "~/xud-simnet is missing"
	exit 1
fi	

source setup.bash
check_prereq

make_dir ~/xud-simnet/lndbtc
make_dir ~/xud-simnet/lndltc
make_dir ~/xud-simnet/xud-wd

#### lnd btc
cd /tmp
rm -rf lnd-btc
mkdir lnd-btc
cd lnd-btc
cp ~/xud-simnet/lndbtc-v0.9.2-beta/*.tar.gz .
tar -xzf vendor.tar.gz
tar -xzf lnd-source-v0.9.2-beta.tar.gz
	
git apply ~/xud-simnet/scripts/limits.patch
git apply ~/xud-simnet/scripts/fundingmanager-btc.patch
echo "lnd-btc limits patched"

cd /tmp/lnd-btc/vendor/github.com/lightninglabs/neutrino

chmod +w blockmanager.go
if ! patch  <~/xud-simnet/scripts/neutrino.patch ; then
        echo "unable to patch neutrion"
        exit 1
fi
echo "neutrino patched"

sed -i.bak "s/\!w.isDevEnv/w.isDevEnv/" /tmp/lnd-btc/vendor/github.com/btcsuite/btcwallet/wallet/wallet.go 

cd /tmp/lnd-btc
patch lnd.go ~/xud-simnet/scripts/lnd.patch

if ! GO111MODULE=on go install -v -mod=vendor -tags="invoicesrpc" -ldflags "-X github.com/lightningnetwork/lnd/build.Commit=v0.9.2-beta" ./cmd/lnd >> /tmp/xud-simnet-install.log 2>&1 ; then
	echo "unable to compile lnd-btc"
	exit 1
fi

if ! GO111MODULE=on go install -v -mod=vendor -tags="invoicesrpc" -ldflags "-X github.com/lightningnetwork/lnd/build.Commit=v0.9.2-beta" ./cmd/lncli >> /tmp/xud-simnet-install.log 2>&1 ; then
	echo "unable to compile lnd-btc"
	exit 1
fi

cd ~/xud-simnet/go/bin
mv lnd lnd-btc

echo "lnd-btc installed"

#### lnd ltc
cd /tmp
rm -rf lnd-ltc
mkdir lnd-ltc
cd lnd-ltc
cp ~/xud-simnet/lndltc-v0.9.0-beta/*.tar.gz .
tar -xzf vendor.tar.gz
tar -xzf lnd-source-v0.9.0-beta.tar.gz

git apply ~/xud-simnet/scripts/limits.patch
git apply ~/xud-simnet/scripts/fundingmanager-ltc.patch
echo "lnd-ltc limits patched"

cd /tmp/lnd-ltc/vendor/github.com/ltcsuite/neutrino

chmod +w blockmanager.go
if ! patch  <~/xud-simnet/scripts/neutrino.patch ; then
        echo "unable to patch neutrino"
        exit 1
fi
echo "neutrino patched"

sed -i.bak "s/\!w.isDevEnv/w.isDevEnv/" /tmp/lnd-ltc/vendor/github.com/ltcsuite/ltcwallet/wallet/wallet.go 

cd /tmp/lnd-ltc
patch lnd.go ~/xud-simnet/scripts/lnd.patch

if ! GO111MODULE=on go install -v -mod=vendor -tags="invoicesrpc" -ldflags "-X github.com/lightningnetwork/lnd/build.Commit=v0.9.0-beta" ./cmd/lnd >> /tmp/xud-simnet-install.log 2>&1 ; then
	echo "unable to compile lnd-ltc"
	exit 1
fi

cd ~/xud-simnet/go/bin
mv lnd lnd-ltc

echo "lnd-ltc installed"

#### xud
cd ~/xud-simnet
if ! git clone https://github.com/ExchangeUnion/xud.git >> /tmp/xud-simnet-install.log 2>&1; then
	echo "unable to git clone xud"
	exit 1
fi
cd xud
if ! npm install >> /tmp/xud-simnet-install.log 2>&1 ; then
	echo "unable to npm install xud"
	exit 1
fi
if ! npm run compile >> /tmp/xud-simnet-install.log 2>&1 ; then
	echo "unable to build xud"
	exit 1
fi

echo "xud installed"

#### raiden
~/xud-simnet/scripts/xud-simnet-install-raiden

echo "Ready!"
